{"version":3,"sources":["logo.svg","Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","JokeList","handleVote","id","delta","setState","st","jokes","map","j","window","localStorage","setItem","JSON","stringify","state","handleClick","loading","getJokes","parse","getItem","seenJokes","Set","console","log","length","numJokesToGet","axios","get","headers","accept","res","newJoke","data","joke","has","push","uuidv4","alert","sort","a","b","src","alt","key","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd1facfe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport './Joke.css';\r\n\r\nexport default class Joke extends Component {\r\n    getColor() {\r\n        if (this.props.votes >= 15) {\r\n            return '#4CAF50';\r\n        } else if (this.props.votes >= 12) {\r\n            return '#8BC34A';\r\n        } else if (this.props.votes >= 9) {\r\n            return '#CDDC39';\r\n        } else if (this.props.votes >= 6) {\r\n            return '#FFEB3B';\r\n        } else if (this.props.votes >= 3) {\r\n            return '#FFC107';\r\n        } else if (this.props.votes >= 0) {\r\n            return '#FF9800';\r\n        } else {\r\n            return '#f44336';\r\n        }\r\n    }\r\n    getEmoji() {\r\n        if (this.props.votes >= 15) {\r\n            return 'em em-rolling_on_the_floor_laughing';\r\n        } else if (this.props.votes >= 12) {\r\n            return 'em em-laughing';\r\n        } else if (this.props.votes >= 9) {\r\n            return 'em em-smiley';\r\n        } else if (this.props.votes >= 6) {\r\n            return 'em em-slightly_smiling_face';\r\n        } else if (this.props.votes >= 3) {\r\n            return 'em em-neutral_face';\r\n        } else if (this.props.votes >= 0) {\r\n            return 'em em-confused';\r\n        } else {\r\n            return 'em em-angry';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Joke\">\r\n                <div className=\"Joke-buttons\">\r\n                    <i\r\n                        className=\"fas fa-arrow-up\"\r\n                        onClick={this.props.upvote}\r\n                    ></i>\r\n                    <span\r\n                        className=\"Joke-votes\"\r\n                        style={{ borderColor: this.getColor() }}\r\n                    >\r\n                        {this.props.votes}\r\n                    </span>\r\n                    <i\r\n                        className=\"fas fa-arrow-down\"\r\n                        onClick={this.props.downvote}\r\n                    ></i>\r\n                </div>\r\n                <div className=\"Joke-text\">{this.props.text}</div>\r\n                <div className=\"Joke-smiley\">\r\n                    <i className={this.getEmoji()}></i>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport Joke from './Joke';\r\n\r\nimport './JokeList.css';\r\nexport default class JokeList extends Component {\r\n    static defaultProps = {\r\n        numJokesToGet: 10\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            jokes: JSON.parse(window.localStorage.getItem('jokes') || '[]'),\r\n            loading: false\r\n        };\r\n        this.seenJokes = new Set(this.state.jokes.map(j => j.text));\r\n        console.log(this.seenJokes);\r\n    }\r\n    async componentDidMount() {\r\n        if (this.state.jokes.length === 0) {\r\n            this.getJokes();\r\n        }\r\n    }\r\n    async getJokes() {\r\n        try {\r\n            // Load Jokes\r\n            let jokes = [];\r\n            while (jokes.length < this.props.numJokesToGet) {\r\n                let res = await axios.get('https://icanhazdadjoke.com/', {\r\n                    headers: { accept: 'application/json' }\r\n                });\r\n                const newJoke = res.data.joke;\r\n                if (!this.seenJokes.has(newJoke)) {\r\n                    jokes.push({\r\n                        id: uuidv4(),\r\n                        text: res.data.joke,\r\n                        votes: 0\r\n                    });\r\n                } else {\r\n                    console.log('Found a Duplicate');\r\n                    console.log(newJoke);\r\n                }\r\n            }\r\n            this.setState(\r\n                st => ({\r\n                    loading: false,\r\n                    jokes: [...st.jokes, ...jokes]\r\n                }),\r\n                () =>\r\n                    window.localStorage.setItem(\r\n                        'jokes',\r\n                        JSON.stringify(this.state.jokes)\r\n                    )\r\n            );\r\n        } catch (err) {\r\n            alert(err);\r\n            this.setState({ loading: false });\r\n        }\r\n    }\r\n    handleVote = (id, delta) => {\r\n        this.setState(\r\n            st => ({\r\n                jokes: st.jokes.map(j =>\r\n                    j.id === id ? { ...j, votes: j.votes + delta } : j\r\n                )\r\n            }),\r\n            () =>\r\n                window.localStorage.setItem(\r\n                    'jokes',\r\n                    JSON.stringify(this.state.jokes)\r\n                )\r\n        );\r\n    };\r\n    handleClick = () => {\r\n        this.setState({ loading: true }, this.getJokes);\r\n    };\r\n    render() {\r\n        if (this.state.loading) {\r\n            return (\r\n                <div className=\"JokeList-spinner\">\r\n                    <i className=\"far fa-8x fa-laugh fa-spin\"></i>\r\n                    <h1 className=\"JokeList-title\">Loading...</h1>\r\n                </div>\r\n            );\r\n        }\r\n        let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\r\n        return (\r\n            <div className=\"JokeList\">\r\n                <div className=\"JokeList-sidebar\">\r\n                    <h1 className=\"JokeList-title\">\r\n                        {' '}\r\n                        <span> Dad</span> Jokes\r\n                    </h1>\r\n                    <img\r\n                        src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\r\n                        alt=\"\"\r\n                        className=\"src\"\r\n                    />\r\n                    <button\r\n                        className=\"JokeList-getmore\"\r\n                        onClick={this.handleClick}\r\n                    >\r\n                        Fetch Jokes\r\n                    </button>\r\n                </div>\r\n                <div className=\"JokeList-jokes\">\r\n                    {jokes.map(j => (\r\n                        <Joke\r\n                            key={j.id}\r\n                            votes={j.votes}\r\n                            text={j.text}\r\n                            upvote={() => this.handleVote(j.id, 1)}\r\n                            downvote={() => this.handleVote(j.id, -1)}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport JokeList from './JokeList';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <JokeList />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}